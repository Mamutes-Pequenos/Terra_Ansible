name: CI/CD Pipeline for Terraform and Kubernetes

on:
  push:
    branches:
      - developer4  # Executa apenas na branch developer3

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GCP credentials (from base64)
        run: |
          mkdir -p /home/runner/gcp_credentials
          echo "${{ secrets.GCP_CREDENTIALS_BASE64 }}" | base64 -d > /home/runner/gcp_credentials/credentials.json
          chmod 600 /home/runner/gcp_credentials/credentials.json

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
        # O terraform.tfvars serÃ¡ lido automaticamente

      - name: Resize node pool
        run: |
          gcloud container clusters resize ${{ env.cluster_name }} \
            --node-pool=${{ env.cluster_name }} \
            --num-nodes=2 \
            --zone=us-east1-b --quiet

      - name: Set cluster name dynamically
        id: set-cluster
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "cluster_name=gke-cluster-prod" >> $GITHUB_ENV
          else
            echo "cluster_name=gke-cluster-homol" >> $GITHUB_ENV
          fi    

      - name: Authenticate gcloud
        run: |
          gcloud auth activate-service-account --key-file=/home/runner/gcp_credentials/credentials.json
          gcloud container clusters get-credentials ${{ env.cluster_name }} --zone=us-east1-b --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Instalar Google Cloud SDK com gke-gcloud-auth-plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | \
            sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo mkdir -p /usr/share/keyrings
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
            sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk kubectl google-cloud-sdk-gke-gcloud-auth-plugin
      
      - name: Check kubectl client version
        run: kubectl version --client

      - name: Apply Namespaces
        run: |
          kubectl apply -f k8s/k8s-observabilidade/observabilidade-namespace.yml
          kubectl apply -f k8s/k8s-banco/db-namespace.yml

      - name: Apply Deployments
        run: |
          kubectl apply -f k8s/k8s-prometheus/prometheus-deployment.yml
          kubectl apply -f k8s/k8s-grafana/grafana-deployment.yml
          kubectl apply -f k8s/k8s-banco/banco-deployment.yml
          kubectl apply -f k8s/k8s-banco/banco-service.yml

      - name: Apply ClusterIP Services
        run: |
          kubectl apply -f k8s/k8s-prometheus/prometheus-service.yml
          kubectl apply -f k8s/k8s-grafana/grafana-service.yml

      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f k8s/k8s-ingress-nginx/deploy.yaml

      - name: Wait for NGINX Ingress Controller Ready
        run: |
          echo "Aguardando Ingress Controller ficar pronto..."
          kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=240s

      - name: Apply Ingress Rules
        run: |
          kubectl apply -f k8s/k8s-observabilidade/observabilidade-ingress.yml

      - name: Verify Ingress
        run: |
          kubectl get ingress -n observabilidade
          kubectl get svc -n ingress-nginx

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ansible sshpass
